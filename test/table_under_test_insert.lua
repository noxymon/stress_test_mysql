require("oltp_common")

sysbench.cmdline.commands.prepare = {
   function ()
      if (not sysbench.opt.auto_inc) then
         -- Create empty tables on prepare when --auto-inc is off, since IDs
         -- generated on prepare may collide later with values generated by
         -- sysbench.rand.unique()
         sysbench.opt.table_size=0
      end

      cmd_prepare()
   end,
   sysbench.cmdline.PARALLEL_COMMAND
}

function prepare_statements()
   -- We do not use prepared statements here, but oltp_common.sh expects this
   -- function to be defined
end

function cleanup()
   local drv = sysbench.sql.driver()
   local con = drv:connect()

   print(string.format("Truncate Table account_transaction...."))
   con:query("truncate table account_transactions")
   print(string.format("Drop the trigger...."))
   con:query("drop trigger account_transactions_increment_id")
end

function cmd_prepare()
   local drv = sysbench.sql.driver()
   local con = drv:connect()

   print(string.format("prepare trigger....."))
   -- uncomment line below if you'd like to use default trigger
   -- con:query("create trigger account_transactions_increment_id before insert on account_transactions for each row BEGIN DECLARE seq_val BIGINT; DECLARE incr_by INT; IF NEW.ID = 0 THEN SELECT next_val, increment_by INTO seq_val, incr_by FROM Sequences WHERE type = 'account_transactions' LIMIT 1 FOR UPDATE; UPDATE Sequences SET next_val = seq_val + incr_by WHERE type = 'account_transactions'; SET NEW.ID = seq_val + incr_by; END IF; END")

   -- uncomment line below if you'd like to use optimized (update ... select ...)
   -- con:query("create trigger account_transactions_increment_id before insert on account_transactions for each row BEGIN DECLARE seq_val BIGINT; IF NEW.ID = 0 THEN UPDATE Sequences SET next_val = next_val + 2 WHERE type = 'account_transactions'; SELECT next_val INTO seq_val FROM Sequences WHERE type = 'account_transactions'; SET NEW.ID = seq_val; END IF; END;")

   -- uncomment line below if you'd like to use optimized trigger (update to variable)
   --con:query("create trigger account_transactions_increment_id before insert on account_transactions for each row BEGIN IF NEW.ID = 0 THEN UPDATE Sequences SET next_val = @seq_val := next_val + 2 WHERE type = 'account_transactions'; SET NEW.ID = @seq_val; END IF; END;")
end

function event()
   local table_name = "account_transactions"
   local k_val = sysbench.rand.default(1, sysbench.opt.table_size)
   local c_val = get_c_value()
   local pad_val = get_pad_value()

    if (sysbench.opt.auto_inc) then
       i = 0
    else
       -- Convert a uint32_t value to SQL INT
       i = sysbench.rand.unique() - 2147483648
    end

    company_id = sysbench.rand.unique() - 2147483648

    con:query(string.format("INSERT INTO table_under_test" ..
    "(account_id, transaction_date, transaction_id, to_account_id, credit, debit,"..
    "balance, reconcile_type_id, created_at, updated_at, version, product_inventory_id, adjustment_id,"..
    "adjustment_type, account_reconcile_id, timestamp_ordering, closing_the_book_id, transaction_account_line_id,"..
    "description, inventoriable_type, is_from_inventory, is_contra_inventory_account, account_transaction_header_id) VALUES" ..
    "(532, date(now()), %d, 400, null, 50000.000000,"..
    "null, null, now(), now(), null, null, null, null, null, now(), null, 2,"..
    "'%s', null, 0, 0, null)", company_id, c_val))
end
